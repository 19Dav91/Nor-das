Առաջադրանք 1:Գրել հետեւյալ նկարագրությանը համապատասխանող ֆունկցիաները
★ gumar(x) - հաշվում եւ վերադարձնում է x զանգվածի տարրերի գումարը
★ Ֆունկցիան ստանում է զանգված և գտնում այդ զանգվածի մեծագույն և փոքրագույն
տարրերի գումարը
★ Ֆունկցիան ստանում է զանգված տեղերով փոխում է մեծագույն և փոքրագույն
տարրերը և վերադարձնում ստացված զանգվածը
★ Ֆունկցիան ստանում է տեքստ և հաշվում, թե քանի բառ կա այդ տեքստում
★ Ֆունկցիան ստանում է տեքստ և հաշվում, թե նրա բառերից քանիսն են սկսվում a
տառով
★ Ֆունկցիան ստանում է զանգված, խառնում զանգվածի տարրերը (shuffle) և
վերադարձնում ստացվածը
★ sortA(x) - եթե x զանգվածի տարրերը աճման կարգով են դասավորված,
վերադարձնում է true, հակառակ դեպքում false
★ toUpperCaseV3(x) - x տողի յուրաքանչյուր բառի առաջին տառը դարձնում է
մեծատառ
★ removeArray(x, n) - x զանգվածից հեռացնում է նրա n-րդ տարրը եւ վերադարձնում
ստացվածը
○ Օրինակ՝ var y = [2,3,4]; y = removeArray(y, 1) -ի դեպքում կստանանք y
= [2,4]
★ insertArray(x,k,n) - x զանգվածում ավելացնում է k տարրը n -րդ դիրքում
○ Օրինակ՝ var x= [4,1,2] զանգվածի դեպքում insertArray(x, 4,1) -ի դեպքում
կստանանք հետեւյալ զանգվածը՝ [4,4,1,2]
★ isPrime(x) - ֆունկցիան վերադարձնում է true, եթե x թիվը պարզ է, եւ false`
հակառակ դեպքում
○ Թիվը կոչվում է պարզ, եթե այն անմնացորդ բաժանվում է միայն իր եւ մեկի վրա
■ Օրինակ՝ 5,7,11 թվերը. 8 թիվը օրինակ պարզ չէ, քանի որ բաժանվում է
նաեւ 2-ի եւ 4 -ի
★ Օգտագործելով isPrime ֆունկցիան գրել մեկ այլ ֆունկցիա countPrime(x) -ը որը
վերադարձնում է x թվերի զանգվածում առկա պարզ թվերի քանակը
★ Գրել match(x) - ֆունկցիան, որը վերադարձնում է x զանգվածի կրկնվող տարրերը
★ Գրել IsPalindrom ֆունկցիան, որը ստանում է x տեքստը եւ ստուգում է արդյո՞ք այն
պալինդրոմ է
a. Այսինքն՝ աջից եւ ձախից կարդացվում է նույն կերպ
★ Գրել ConvertToBinary(x) ֆունկցիան, որը 10-ական համակարգի x թիվը ձևափոխում
է 2-ական համակարգի
○ Օրինակ ConverToBinary(45) կստացվի 101101
Առաջադրանք 2:JoinV2(x,y) - ֆունկցիան x զանգվածի տարրերը վերածում է տողի՝
կապելով իրար ըստ y սիմվոլի
★ Օրինակ JoinV2([“armen”,”hayk”, “david”], “/”])
○ Կստանանք “armen/hayk/david” տեքստը
Առաջադրանք 3:SplitV2(x,y) - ֆունկցիան x տողը տրոհում է զանգվածի՝ ըստ y սիմվոլի
★ Օրինակ՝ SplitV2(“gmail.@gmail.com”, “@”) կանչի դեպքում կստանանք հետեւյալ
զանգվածը՝ [“gmail.”, “gmail.com”]
Առաջադրանք 4:replaceV2(s,x,y) ֆունկցիան s տողի մեջ փոխում է x ենթատեքստը y -ով
եւ վերադարձնում ստացվածը
★ Օրինակ՝ replaceV2(“i hate javascript”, “hate”, “love”) արտահայտության դեպքում
կստանանք՝ I love javascript տեքստը
Առաջադրանք 5:indexAll(x,k) - ֆունկցիան վերադարձնում է x տողի մեջ k տառի
հանդիպման բոլոր ինդեքսները
★ Օրինակ՝ indexAll(“ararat”, “a”) -ի դեպքում կստանանք այսպիսի զանգված՝ [0,2,4],
քանի որ a տառը “ararat” բառի մեջ հանդիպում է 0, 2, եւ 4 ինդեքսներում
Առաջադրանք 6: getRandomNumber(a,b) ֆունկցիան վերադարձնում է պատահական թիվ
a,b հատվածից
★ Օրինակ՝ getRandomNumber(0,10) -ի դեպքում կարող է ստացվել օրինակ 7
★ Եթե ֆունկցիան ստանում է նաեւ երրորդ պարամետր
○ Օրինակ getRandomNumber(0,10,5), ապա անհրաժեշտ է ստանալ զանգված,
որն ունի 5 տարր եւ այդ տարրերը պատահական թվեր են 0-ից 10 հատվածից
★ Ֆունկցիան կարող է ստանալ նաեւ 4-րդ պարամետր {true,false}
○ getRandomNumber(a,b,n,T)
■ Եթե t == true
● Ապա ստացվում է n տարր պարունակող, a,b հատվածից
պատահական թվեր պարունակող զանգված, որտեղ տարրերը չեն
կրկնվում
○ Վերադարձնել false, եթե այդպիսի զանգված անհնար է
ստանալ
■ Եթե t == false, կամ բացակայում է այդ պարամետրը, ապա տարրերը
կարող են կրկնվել
Առաջադրանք 7:FilterF(x,y) - ֆունկցիան ստանում է x զանգված և y արտահայտություն և
վերադարձնում է x զանգվածից այն տարրերը, որոնք պարունակում են y արտահայտություն
★ Օրինակ`FilterF([karine,nune,arman,sevak,mari],”ar”) -ի դեպքում կստանանք
այսպիսի զանգված՝ [karine,arman,mari], քանի որ “ar” արտահայտությունը
հանդիպում է միայն այս բառերում
Առաջադրանք 8: makeUnique(x) - որպես արգումենտ ստանում է x զանգված և
վերադարձնում է նոր զանգված որում առկա են x զանգվածի կրկնվող տարրերը
★ Օրինակ՝ makeUnique([‘c’, ‘a’, ’b’, ’c’,’d’, ‘a’, ‘c’]), այս դեպքում կվերադարձնի`
[‘a’,’c’] զանգվածը
Առաջադրանք 9: remake(x,y,z) այս ֆունկցիան ստանում է մեկ զանգված և երկու ինդեքս
այսպ